---
import Title from "../components/Title.svelte"
import FrameworkLabel from "../components/FrameworkLabel.svelte"
import fs from 'node:fs/promises';
import kebabCase from 'lodash.kebabcase';
import { Code, Markdown } from "astro/components"
import nodePath from "node:path"
import FRAMEWORKS from '../frameworks';

const { path: sectionPath } = Astro.props

const sectionId = sectionPath.split("/").pop()

const sections = []

function dirNameToTitle(dirName) {
	return capitalize(dirName.split('-').splice(1).join(' '));
}

function capitalize(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}

const subSectionDirNames = await fs.readdir(sectionPath)

for(const dirName of subSectionDirNames){
    const path = `${sectionPath}/${dirName}`
    const title = dirNameToTitle(dirName)

    const frameworkDirs = await fs.readdir(path)
    const frameworkSections = []
    for(const frameworkDir of frameworkDirs){
        const frameworkPath = `${path}/${frameworkDir}`
        const files = []
        const fileNames = await fs.readdir(`${frameworkPath}`)

        for(const fileName of fileNames){
            const filePath = `${frameworkPath}/${fileName}`
            files.push({
                path: filePath,
                fileName: fileName,
                ext: nodePath.parse(filePath).ext.split(".").pop(),
                content: (await fs.readFile(filePath, "utf-8"))
            })
        }

        frameworkSections.push({
            dirName: frameworkDir,
            path: frameworkPath,
            files
        })
    }

    
    sections.push({
        id: kebabCase(title),
        path,
        dirName,
        title,
        frameworkSections
    })
}
---


<Title as="h1" content={dirNameToTitle(sectionId)} />

{sections.map((section) => 
    (
        <>
            <Title as="h2" content={section.title}/>
            {FRAMEWORKS.map((framework) => (
                <>
                    <div data-framework-content={framework.id}>
                        <div role="button" data-framework-button-hide={framework.id}>
                            <h3 class="hover:bg-gray-800 transition-all rounded py-1 px-2">
                                <FrameworkLabel id={framework.id} />
                            </h3>
                        </div>
                        <div>
                            {section.frameworkSections.find(f => f.dirName === framework.id) ?
                                section.frameworkSections.find(f => f.dirName === framework.id).files.map((file) => (
                                    file.ext === 'md'
                                    ? <Markdown set:html={file.content} />
                                    :
                                    <div>
                                        <div class="bg-gray-800 py-1.5 px-3 text-xs rounded-t inline-block">
                                            {file.fileName}
                                        </div>
                                        <Code code={file.content} lang={file.ext} />
                                    </div>
                                ))
                            :
                                <pre>Oops, missing snippet ! <a href={`https://github.com/matschik/component-party/tree/main/content/${sectionId}/${section.dirName}`}>You can help us by contributing on Github.</a></pre>
                            }
                        </div>
                    </div>
                </>
            ))}
            <div class="flex items-center space-x-2" style="margin-top: 1rem;">
                {FRAMEWORKS.map((framework) => (
                    <button data-framework-button-show={framework.id} title={`Display ${framework.title}`} class="text-sm rounded border border-gray-700 px-3 py-1 border-opacity-50 bg-gray-900 hover:bg-gray-800 transition-all">
                        <FrameworkLabel id={framework.id} size={15} />
                    </button>
                ))}
            </div>
        </>
    )
)}